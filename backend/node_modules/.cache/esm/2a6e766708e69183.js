let express,registerController,loginController,productController,isAuthenticated,isAdmin;_08e‍.x([["default",()=>_08e‍.o]]);_08e‍.w("express",[["default",["express"],function(v){express=v}]]);_08e‍.w("../controller",[["registerController",["registerController"],function(v){registerController=v}],["loginController",["loginController"],function(v){loginController=v}],["productController",["productController"],function(v){productController=v}]]);_08e‍.w("../middlewares/auth",[["default",["isAuthenticated"],function(v){isAuthenticated=v}]]);_08e‍.w("../middlewares/admin",[["default",["isAdmin"],function(v){isAdmin=v}]]);




const router = express.Router();

// --------------------- User Controller -------------------------------------- //

router.post('/register', registerController.register);
router.post('/login', loginController.login);
router.post('/logout', isAuthenticated, loginController.logout);

// --------------------- Products Controller --------------------------------- //

router.post('/create-product', [isAuthenticated, isAdmin], productController.createProduct);
router.put('/update-product/:id', [isAuthenticated, isAdmin], productController.updateProduct);
router.delete('/delete-product', [isAuthenticated, isAdmin], productController.deleteProduct);
router.post('/get-product-by-id', productController.getProductById);
router.get('/get-all-products', productController.getAllProducts);
router.post('/save-product-image', [isAuthenticated, isAdmin], productController.addProductimage);
router.delete('/delete-product-image', [isAuthenticated, isAdmin], productController.deleteProductImage);
router.get('/get-product-images-by-product-id/:id', productController.getProductImagesByProductId);

_08e‍.d(router);
